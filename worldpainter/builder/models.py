# worldpainter/builder/models.py
# Auto-generated by Django's inspectdb and then manually cleaned up.
from django.db import models
from django.contrib.auth.models import User # For linking to Django's built-in user
import uuid
from game.definitions.item_defs import ITEM_TYPE_CHOICES, GENERAL

MOB_TYPE_CHOICES = [
    ("BEAST", "Beast"), ("HUMANOID", "Humanoid"), ("UNDEAD", "Undead"),
    ("ELEMENTAL", "Elemental"), ("GIANT", "Giant"), ("DRAGON", "Dragon"),
]

# --- Core Template Models ---

class Areas(models.Model):
    name = models.CharField(unique=True, max_length=75)
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} (ID: {self.id})"

    class Meta:
        managed = False
        db_table = 'areas'
        verbose_name_plural = "Areas"

class Races(models.Model):
    name = models.TextField(unique=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

    class Meta:
        managed = False
        db_table = 'races'
        verbose_name_plural = "Races"

class Classes(models.Model):
    name = models.TextField(unique=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

    class Meta:
        managed = False
        db_table = 'classes'
        verbose_name_plural = "Classes"

class DamageTypes(models.Model):
    name = models.TextField(unique=True)
    is_magical = models.BooleanField()

    def __str__(self):
        return self.name.capitalize()

    class Meta:
        managed = False
        db_table = 'damage_types'
        verbose_name_plural = "Damage Types"

class ItemTemplates(models.Model):
    name = models.CharField(unique=True, max_length=100)
    description = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=20, choices=ITEM_TYPE_CHOICES, default=GENERAL)
    stats = models.JSONField(blank=True, null=True, help_text='Ex: {"might": 5, "value": 100, "damage_base": 10}')
    flags = models.JSONField(blank=True, null=True, help_text='Ex: ["GLOWS", "NO_DROP"]')
    damage_type = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} (ID: {self.id})"

    class Meta:
        managed = False
        db_table = 'item_templates'

class MobTemplates(models.Model):
    name = models.CharField(unique=True, max_length=100)
    description = models.TextField(blank=True, null=True)
    mob_type = models.CharField(max_length=20, choices=MOB_TYPE_CHOICES, blank=True, null=True)
    level = models.IntegerField()
    stats = models.JSONField(blank=True, null=True, help_text='Ex: {"might": 15, "agility": 12}')
    resistances = models.JSONField(blank=True, null=True, help_text='Ex: {"fire": 0.5, "cold": -0.25}')
    max_hp = models.IntegerField()
    max_coinage = models.IntegerField()
    flags = models.JSONField(blank=True, null=True, help_text='Ex: ["AGGRESSIVE", "SENTINEL"]')
    respawn_delay_seconds = models.IntegerField(blank=True, null=True)
    variance = models.JSONField(blank=True, null=True)
    movement_chance = models.FloatField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} (Lvl {self.level}, ID: {self.id})"

    class Meta:
        managed = False
        db_table = 'mob_templates'

class AbilityTemplates(models.Model):
    internal_name = models.TextField(unique=True)
    name = models.TextField()
    ability_type = models.TextField()
    class_req = models.JSONField(blank=True, null=True)
    level_req = models.IntegerField(blank=True, null=True)
    cost = models.IntegerField(blank=True, null=True)
    target_type = models.TextField(blank=True, null=True)
    effect_type = models.TextField(blank=True, null=True)
    effect_details = models.JSONField(blank=True, null=True)
    cast_time = models.FloatField(blank=True, null=True)
    roundtime = models.FloatField(blank=True, null=True)
    messages = models.JSONField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

    class Meta:
        managed = False
        db_table = 'ability_templates'

# --- World Structure and Object Models ---

class Rooms(models.Model):
    area = models.ForeignKey(Areas, on_delete=models.PROTECT)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    spawners = models.JSONField(blank=True, null=True) # {"MOB_TEMPLATE_ID": {"max_present": COUNT}}
    # {"101": {"max_present": 3}, "102": {"max_present": 1}}
    flags = models.JSONField(blank=True, null=True)
    coinage = models.IntegerField(default=0, blank=True)
    shop_buy_filter = models.JSONField(blank=True, null=True, help_text='List of item types this shop buys. Ex: ["WEAPON", "ARMOR"]')
    shop_sell_modifier = models.FloatField(default=0.5, help_text="Multiplier for item base value when buying from players. 0.5 = 50%.")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} ({self.area.name}, ID: {self.id})"

    class Meta:
        managed = False
        db_table = 'rooms'
        verbose_name_plural = "Rooms"

class Exits(models.Model):
    source_room = models.ForeignKey(Rooms, on_delete=models.CASCADE, related_name='source_exits')
    direction = models.TextField()
    destination_room = models.ForeignKey(Rooms, on_delete=models.CASCADE, related_name='destination_exits')
    is_hidden = models.BooleanField()

    def __str__(self):
        return f"From {self.source_room.id} -> {self.direction} -> {self.destination_room.id}"

    class Meta:
        managed = False
        db_table = 'exits'
        unique_together = (('source_room', 'direction'),)
        verbose_name_plural = "Exits"

class RoomObjects(models.Model):
    room = models.ForeignKey(Rooms, on_delete=models.CASCADE, related_name='objects')
    name = models.TextField()
    description = models.TextField(blank=True, null=True)
    keywords = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name} in Room {self.room.id}"

    class Meta:
        managed = False
        db_table = 'room_objects'
        unique_together = (('room', 'name'),)
        verbose_name_plural = "Room Objects"

class ShopInventories(models.Model):
    room = models.ForeignKey(Rooms, on_delete=models.CASCADE, related_name='shop_inventory')
    item_template = models.ForeignKey(ItemTemplates, on_delete=models.PROTECT)
    stock_quantity = models.IntegerField()
    buy_price_modifier = models.FloatField()
    sell_price_modifier = models.FloatField()

    def __str__(self):
        return f"{self.item_template.name} stock in {self.room.name}"

    class Meta:
        managed = False
        db_table = 'shop_inventories'
        unique_together = (('room', 'item_template'),)
        verbose_name_plural = "Shop Inventories"

# --- Mob-Related Relational Models ---

class MobAttacks(models.Model):
    mob_template = models.ForeignKey(MobTemplates, on_delete=models.CASCADE, related_name='attacks')
    name = models.TextField()
    damage_base = models.IntegerField(blank=True, null=True)
    damage_rng = models.IntegerField(blank=True, null=True)
    speed = models.FloatField(blank=True, null=True)
    attack_type = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} ({self.mob_template.name})"

    class Meta:
        managed = False
        db_table = 'mob_attacks'
        verbose_name_plural = "Mob Attacks"

class MobLootTable(models.Model):
    mob_template = models.ForeignKey(MobTemplates, on_delete=models.CASCADE, related_name='loot_table')
    item_template = models.ForeignKey(ItemTemplates, on_delete=models.CASCADE)
    drop_chance = models.FloatField()
    min_quantity = models.IntegerField()
    max_quantity = models.IntegerField()

    def __str__(self):
        return f"{self.item_template.name} from {self.mob_template.name}"

    class Meta:
        managed = False
        db_table = 'mob_loot_table'

# --- Player and Character Models ---

class Players(models.Model):
    username = models.TextField(unique=True)
    hashed_password = models.TextField()
    email = models.TextField(unique=True)
    is_admin = models.BooleanField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_login = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return self.username

    class Meta:
        managed = False
        db_table = 'players'
        verbose_name_plural = "Players"

class Characters(models.Model):
    player = models.ForeignKey(Players, on_delete=models.CASCADE)
    first_name = models.TextField()
    last_name = models.TextField()
    sex = models.TextField()
    race = models.ForeignKey(Races, on_delete=models.SET_NULL, blank=True, null=True)
    class_field = models.ForeignKey(Classes, on_delete=models.SET_NULL, db_column='class_id', blank=True, null=True, verbose_name="Class")
    level = models.IntegerField(default=1)
    description = models.TextField(blank=True, null=True)
    hp = models.FloatField(default=50.0)
    max_hp = models.FloatField(default=50.0)
    essence = models.FloatField(default=20.0)
    max_essence = models.FloatField(default=20.0)
    spiritual_tether = models.IntegerField(blank=True, null=True)
    xp_pool = models.FloatField(default=0.0)
    xp_total = models.FloatField(default=0.0)
    status = models.TextField(default='ALIVE')
    stance = models.TextField(default='Standing')
    unspent_skill_points = models.IntegerField(default=0)
    unspent_attribute_points = models.IntegerField(default=0)
    location_id = models.IntegerField(default=1)
    coinage = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    last_saved = models.DateTimeField(blank=True, null=True)
    total_playtime_seconds = models.IntegerField(default=0)

    def __str__(self):
        return f"{self.first_name} {self.last_name} (Player: {self.player.username})"

    class Meta:
        managed = False
        db_table = 'characters'
        unique_together = (('player', 'first_name', 'last_name'),)
        verbose_name_plural = "Characters"

class CharacterStats(models.Model):
    character = models.OneToOneField(Characters, on_delete=models.CASCADE, primary_key=True, related_name='stats_record')
    might = models.IntegerField(default=10)
    vitality = models.IntegerField(default=10)
    agility = models.IntegerField(default=10)
    intellect = models.IntegerField(default=10)
    aura = models.IntegerField(default=10)
    persona = models.IntegerField(default=10)

    def __str__(self):
        return f"Stats for {self.character}"

    class Meta:
        managed = False
        db_table = 'character_stats'
        verbose_name_plural = "Character Stats"

class CharacterSkills(models.Model):
    character = models.ForeignKey(Characters, on_delete=models.CASCADE, related_name='skills')
    skill_name = models.TextField()
    rank = models.IntegerField(default=0)

    def __str__(self):
        return f"{self.skill_name.capitalize()} (Rank {self.rank}) for {self.character}"

    class Meta:
        managed = False
        db_table = 'character_skills'
        unique_together = (('character', 'skill_name'),)
        verbose_name_plural = "Character Skills"

# --- Item, Equipment, and Bank Models ---

class ItemInstances(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    template = models.ForeignKey(ItemTemplates, on_delete=models.CASCADE)
    owner_char = models.ForeignKey(Characters, on_delete=models.SET_NULL, blank=True, null=True)
    room = models.ForeignKey(Rooms, on_delete=models.SET_NULL, blank=True, null=True)
    container = models.ForeignKey('self', on_delete=models.SET_NULL, blank=True, null=True)
    condition = models.IntegerField(default=100)
    instance_stats = models.JSONField(blank=True, null=True)
    last_moved_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.template.name} ({self.id})"

    class Meta:
        managed = False
        db_table = 'item_instances'
        verbose_name_plural = "Item Instances"

class CharacterEquipment(models.Model):
    character = models.OneToOneField(Characters, on_delete=models.CASCADE, primary_key=True, related_name='equipment')
    head = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='head')
    torso = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='torso')
    legs = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='legs')
    feet = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='feet')
    hands = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='hands')
    main_hand = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='main_hand')
    off_hand = models.ForeignKey(ItemInstances, on_delete=models.SET_NULL, blank=True, null=True, related_name='+', db_column='off_hand')

    def __str__(self):
        return f"Equipment for {self.character}"

    class Meta:
        managed = False
        db_table = 'character_equipment'
        verbose_name_plural = "Character Equipment"

class BankAccounts(models.Model):
    character = models.OneToOneField(Characters, on_delete=models.CASCADE, primary_key=True)
    balance = models.BigIntegerField()

    def __str__(self):
        return f"Bank account for {self.character}"

    class Meta:
        managed = False
        db_table = 'bank_accounts'

class BankedItems(models.Model):
    character = models.ForeignKey(Characters, on_delete=models.CASCADE)
    item_instance = models.OneToOneField(ItemInstances, on_delete=models.CASCADE)
    stored_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Banked item {self.item_instance_id} for {self.character}"

    class Meta:
        managed = False
        db_table = 'banked_items'

# --- Economy and Django Internal Models (Can be safely ignored) ---

class GameEconomy(models.Model):
    key = models.TextField(primary_key=True)
    value = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'game_economy'

class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)

class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)

class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'

class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)

class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)

class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'

class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)

class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'

class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'