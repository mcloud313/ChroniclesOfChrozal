# Generated by Django 5.2.6 on 2025-09-24 19:25

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AbilityTemplates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("internal_name", models.TextField(unique=True)),
                ("name", models.TextField()),
                ("ability_type", models.TextField()),
                ("class_req", models.JSONField(blank=True, null=True)),
                ("level_req", models.IntegerField(blank=True, null=True)),
                ("cost", models.IntegerField(blank=True, null=True)),
                ("target_type", models.TextField(blank=True, null=True)),
                ("effect_type", models.TextField(blank=True, null=True)),
                ("effect_details", models.JSONField(blank=True, null=True)),
                ("cast_time", models.FloatField(blank=True, null=True)),
                ("roundtime", models.FloatField(blank=True, null=True)),
                ("messages", models.JSONField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "ability_templates",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Areas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=75, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Areas",
                "db_table": "areas",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Characters",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.TextField()),
                ("last_name", models.TextField()),
                ("sex", models.TextField()),
                ("level", models.IntegerField(default=1)),
                ("description", models.TextField(blank=True, null=True)),
                ("hp", models.FloatField(default=50.0)),
                ("max_hp", models.FloatField(default=50.0)),
                ("essence", models.FloatField(default=20.0)),
                ("max_essence", models.FloatField(default=20.0)),
                ("spiritual_tether", models.IntegerField(blank=True, null=True)),
                ("xp_pool", models.FloatField(default=0.0)),
                ("xp_total", models.FloatField(default=0.0)),
                ("status", models.TextField(default="ALIVE")),
                ("stance", models.TextField(default="Standing")),
                ("unspent_skill_points", models.IntegerField(default=0)),
                ("unspent_attribute_points", models.IntegerField(default=0)),
                ("location_id", models.IntegerField(default=1)),
                ("coinage", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_saved", models.DateTimeField(blank=True, null=True)),
                ("total_playtime_seconds", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name_plural": "Characters",
                "db_table": "characters",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BankedItems",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stored_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "banked_items",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterSkills",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("skill_name", models.TextField()),
                ("rank", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name_plural": "Character Skills",
                "db_table": "character_skills",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Classes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Classes",
                "db_table": "classes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DamageTypes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("is_magical", models.BooleanField()),
            ],
            options={
                "verbose_name_plural": "Damage Types",
                "db_table": "damage_types",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.SmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Exits",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("direction", models.TextField()),
                ("is_hidden", models.BooleanField()),
            ],
            options={
                "verbose_name_plural": "Exits",
                "db_table": "exits",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GameEconomy",
            fields=[
                ("key", models.TextField(primary_key=True, serialize=False)),
                ("value", models.BigIntegerField()),
            ],
            options={
                "db_table": "game_economy",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ItemInstances",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("condition", models.IntegerField(default=100)),
                ("instance_stats", models.JSONField(blank=True, null=True)),
                ("last_moved_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Item Instances",
                "db_table": "item_instances",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ItemTemplates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("GENERAL", "General"),
                            ("WEAPON", "Melee Weapon"),
                            ("TWO_HANDED_WEAPON", "Two-Handed Weapon"),
                            ("RANGED_WEAPON", "Ranged Weapon"),
                            ("AMMO", "Ammunition"),
                            ("ARMOR", "Armor"),
                            ("CONTAINER", "Container"),
                            ("QUIVER", "Quiver"),
                            ("QUEST", "Quest Item"),
                            ("FOOD", "Food"),
                            ("DRINK", "Drink"),
                            ("KEY", "Key"),
                            ("LIGHT", "Light Source"),
                        ],
                        default="GENERAL",
                        max_length=50,
                    ),
                ),
                (
                    "stats",
                    models.JSONField(
                        blank=True,
                        help_text='Ex: {"might": 5, "value": 100, "damage_base": 10}',
                        null=True,
                    ),
                ),
                (
                    "flags",
                    models.JSONField(
                        blank=True, help_text='Ex: ["GLOWS", "NO_DROP"]', null=True
                    ),
                ),
                ("damage_type", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lock_details",
                    models.JSONField(
                        blank=True,
                        help_text='JSON defining lock properties, e.g., {"is_locked": true, "lockpick_dc": 25, "key_name": "a rusty key"}',
                        null=True,
                    ),
                ),
                (
                    "trap_details",
                    models.JSONField(
                        blank=True,
                        help_text='JSON defining trap properties, e.g., {"is_active": true, "disarm_dc": 20, "perception_dc": 18}',
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "item_templates",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MobAttacks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("damage_base", models.IntegerField(blank=True, null=True)),
                ("damage_rng", models.IntegerField(blank=True, null=True)),
                ("speed", models.FloatField(blank=True, null=True)),
                ("attack_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Mob Attacks",
                "db_table": "mob_attacks",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MobLootTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("drop_chance", models.FloatField()),
                ("min_quantity", models.IntegerField()),
                ("max_quantity", models.IntegerField()),
            ],
            options={
                "db_table": "mob_loot_table",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MobTemplates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "mob_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BEAST", "Beast"),
                            ("HUMANOID", "Humanoid"),
                            ("UNDEAD", "Undead"),
                            ("ELEMENTAL", "Elemental"),
                            ("GIANT", "Giant"),
                            ("DRAGON", "Dragon"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("level", models.IntegerField()),
                (
                    "stats",
                    models.JSONField(
                        blank=True,
                        help_text='Ex: {"might": 15, "agility": 12}',
                        null=True,
                    ),
                ),
                (
                    "resistances",
                    models.JSONField(
                        blank=True,
                        help_text='Ex: {"fire": 0.5, "cold": -0.25}',
                        null=True,
                    ),
                ),
                ("max_hp", models.IntegerField()),
                ("max_coinage", models.IntegerField()),
                (
                    "flags",
                    models.JSONField(
                        blank=True,
                        help_text='Ex: ["AGGRESSIVE", "SENTINEL"]',
                        null=True,
                    ),
                ),
                ("respawn_delay_seconds", models.IntegerField(blank=True, null=True)),
                ("variance", models.JSONField(blank=True, null=True)),
                ("movement_chance", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "mob_templates",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Players",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.TextField(unique=True)),
                ("hashed_password", models.TextField()),
                ("email", models.TextField(unique=True)),
                ("is_admin", models.BooleanField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Players",
                "db_table": "players",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Races",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Races",
                "db_table": "races",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoomObjects",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("keywords", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Room Objects",
                "db_table": "room_objects",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Rooms",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("spawners", models.JSONField(blank=True, null=True)),
                ("flags", models.JSONField(blank=True, null=True)),
                ("coinage", models.IntegerField(blank=True, default=0)),
                (
                    "shop_buy_filter",
                    models.JSONField(
                        blank=True,
                        help_text='List of item types this shop buys. Ex: ["WEAPON", "ARMOR"]',
                        null=True,
                    ),
                ),
                (
                    "shop_sell_modifier",
                    models.FloatField(
                        default=0.5,
                        help_text="Multiplier for item base value when buying from players. 0.5 = 50%.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Rooms",
                "db_table": "rooms",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShopInventories",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stock_quantity", models.IntegerField()),
                ("buy_price_modifier", models.FloatField()),
                ("sell_price_modifier", models.FloatField()),
            ],
            options={
                "verbose_name_plural": "Shop Inventories",
                "db_table": "shop_inventories",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BankAccounts",
            fields=[
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="builder.characters",
                    ),
                ),
                ("balance", models.BigIntegerField()),
            ],
            options={
                "db_table": "bank_accounts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterEquipment",
            fields=[
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="equipment",
                        serialize=False,
                        to="builder.characters",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Character Equipment",
                "db_table": "character_equipment",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterStats",
            fields=[
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="stats_record",
                        serialize=False,
                        to="builder.characters",
                    ),
                ),
                ("might", models.IntegerField(default=10)),
                ("vitality", models.IntegerField(default=10)),
                ("agility", models.IntegerField(default=10)),
                ("intellect", models.IntegerField(default=10)),
                ("aura", models.IntegerField(default=10)),
                ("persona", models.IntegerField(default=10)),
            ],
            options={
                "verbose_name_plural": "Character Stats",
                "db_table": "character_stats",
                "managed": False,
            },
        ),
    ]
